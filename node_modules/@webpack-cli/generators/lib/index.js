"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initGenerator = exports.addonGenerator = void 0;
const yeoman_environment_1 = __importDefault(require("yeoman-environment"));
const loader_generator_1 = __importDefault(require("./loader-generator"));
const plugin_generator_1 = __importDefault(require("./plugin-generator"));
const addon_generator_1 = __importDefault(require("./addon-generator"));
exports.addonGenerator = addon_generator_1.default;
const init_generator_1 = __importDefault(require("./init-generator"));
exports.initGenerator = init_generator_1.default;
class GeneratorsCommand {
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
    async apply(cli) {
        const { logger } = cli;
        await cli.makeCommand({
            name: 'init [generation-path]',
            alias: 'c',
            description: 'Initialize a new webpack project.',
            usage: '[generation-path] [options]',
            pkg: '@webpack-cli/generators',
        }, [
            {
                name: 'template',
                configs: [{ type: 'string' }],
                description: 'Type of template',
                defaultValue: 'default',
            },
            {
                name: 'force',
                configs: [{ type: 'boolean' }],
                description: 'Generate without questions (ideally) using default answers',
            },
        ], async (generationPath, options) => {
            options.generationPath = generationPath || '.';
            const env = yeoman_environment_1.default.createEnv([], { cwd: options.generationPath });
            const generatorName = 'webpack-init-generator';
            env.registerStub(init_generator_1.default, generatorName);
            env.run(generatorName, { options }, () => {
                logger.success('Project has been initialised with webpack!');
            });
        });
        await cli.makeCommand({
            name: 'loader [output-path]',
            alias: 'l',
            description: 'Scaffold a loader.',
            usage: '[output-path]',
            pkg: '@webpack-cli/generators',
        }, [], async (outputPath) => {
            const env = yeoman_environment_1.default.createEnv([], { cwd: outputPath });
            const generatorName = 'webpack-loader-generator';
            env.registerStub(loader_generator_1.default, generatorName);
            env.run(generatorName, () => {
                logger.success('Loader template has been successfully scaffolded.');
            });
        });
        await cli.makeCommand({
            name: 'plugin [output-path]',
            alias: 'p',
            description: 'Scaffold a plugin.',
            usage: '[output-path]',
            pkg: '@webpack-cli/generators',
        }, [], async (outputPath) => {
            const env = yeoman_environment_1.default.createEnv([], { cwd: outputPath });
            const generatorName = 'webpack-plugin-generator';
            env.registerStub(plugin_generator_1.default, generatorName);
            env.run(generatorName, () => {
                logger.success('Plugin template has been successfully scaffolded.');
            });
        });
    }
}
exports.default = GeneratorsCommand;
