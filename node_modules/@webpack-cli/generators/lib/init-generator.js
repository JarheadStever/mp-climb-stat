"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const colorette_1 = require("colorette");
const webpack_cli_1 = require("webpack-cli");
const path_1 = __importDefault(require("path"));
const Question = __importStar(require("./utils/scaffold-utils"));
const types_1 = require("./types");
const fs_1 = require("fs");
const handlers_1 = __importDefault(require("./handlers"));
const { logger, getPackageManager } = webpack_cli_1.utils;
/**
 *
 * Generator for initializing a webpack config
 *
 * @class 	InitGenerator
 * @extends CustomGenerator
 * @returns {Void} After execution, transforms are triggered
 *
 */
class InitGenerator extends types_1.CustomGenerator {
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
    constructor(args, opts) {
        super(args, opts);
        const { options } = opts;
        this.template = options.template;
        this.generationPath = options.generationPath;
        this.resolvedGenerationPath = path_1.default.resolve(process.cwd(), this.generationPath);
        this.force = options.force;
        this.dependencies = ['webpack', 'webpack-cli'];
        this.supportedTemplates = Object.keys(handlers_1.default);
        this.answers = {};
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async prompting() {
        if (!fs_1.existsSync(this.resolvedGenerationPath)) {
            logger.log(`${colorette_1.blue('ℹ INFO ')} supplied generation path doesn't exist, required folders will be created.`);
            try {
                fs_1.mkdirSync(this.resolvedGenerationPath, { recursive: true });
            }
            catch (err) {
                logger.error('Failed to create directory');
                logger.error(err);
                process.exit(1);
            }
        }
        if (!this.supportedTemplates.includes(this.template)) {
            logger.log(`${colorette_1.yellow(`⚠ ${this.template} is not a valid template, please select one from below`)}`);
            const { selectedTemplate } = await Question.List(this, 'selectedTemplate', 'Select a valid template from below:', this.supportedTemplates, 'default', false);
            this.template = selectedTemplate;
        }
        await handlers_1.default[this.template].questions(this, Question);
    }
    installPlugins() {
        const packager = getPackageManager();
        const opts = packager === 'yarn' ? { dev: true } : { 'save-dev': true };
        this.scheduleInstallTask(packager, this.dependencies, opts, { cwd: this.generationPath });
    }
    writing() {
        logger.log(`${colorette_1.blue('ℹ INFO ')} Initialising project...`);
        handlers_1.default[this.template].generate(this);
    }
}
exports.default = InitGenerator;
